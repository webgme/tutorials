/*globals define, WebGMEGlobal, $, d3*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue May 03 2016 14:32:33 GMT-0500 (Central Daylight Time).
 */

define(['jquery', 'd3', 'css!./styles/FSMSimulatorWidget.css'], function () {
    'use strict';

    var FSMSimulatorWidget,
        WIDGET_CLASS = 'f-s-m-simulator';

    FSMSimulatorWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    };

    FSMSimulatorWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create indication header
        this._headerEl = $('<h3>');
        this._el.append(this._headerEl);

        // Create the d3
        this._svgD3 = d3.select(this._el[0]).append('svg')
            .attr('width', width)
            .attr('height', height);

        // Registering to events can be done with jQuery (as normal)
        this._el.on('dblclick', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.onBackgroundDblClick();
        });
    };

    FSMSimulatorWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');

        this._svgD3 = d3.select(this._el[0]).append('svg')
            .attr('width', width)
            .attr('height', height);
    };

    FSMSimulatorWidget.prototype.populateGraph = function (fsmData) {
        var key,
            node;

        this._logger.debug('fsmData', fsmData);
        this._gmeIdToData = fsmData.nodes;
        this._gmeIdToSvg = {};

        for (key in fsmData.nodes) {
            node = fsmData.nodes[key];
            if (node.metaType === 'State') {
                this._gmeIdToSvg[key] = this._svgD3.append("circle")
                    .attr("cx", node.position.x)
                    .attr("cy", node.position.y)
                    .attr("r", 15)
                    .attr('fill', 'gray');
            } else if (node.metaType === 'Initial') {
                this._gmeIdToSvg[key] = this._svgD3.append("circle")
                    .attr("cx", node.position.x)
                    .attr("cy", node.position.y)
                    .attr("r", 15)
                    .attr('fill', 'green');
            } else if (node.metaType === 'End') {
                this._gmeIdToSvg[key] = this._svgD3.append("circle")
                    .attr("cx", node.position.x)
                    .attr("cy", node.position.y)
                    .attr("r", 15)
                    .attr('fill', 'purple');
            } else if (node.isConnection) {
                this._gmeIdToSvg[key] = this._svgD3.append("line")
                    .attr("x1", this._gmeIdToData[node.connects.src].position.x)
                    .attr("y1", this._gmeIdToData[node.connects.src].position.y)
                    .attr("x2", this._gmeIdToData[node.connects.dst].position.x)
                    .attr("y2", this._gmeIdToData[node.connects.dst].position.y)
                    .attr('stroke-width', 1)
                    .attr('stroke', 'black');
            }
        }
    };

    // Adding/Removing/Updating items
    FSMSimulatorWidget.prototype.addNode = function (desc) {
        this._headerEl.css('color', 'red');
        this._headerEl.text('Current model may have changed.');
    };

    FSMSimulatorWidget.prototype.removeNode = function (gmeId) {
        this._headerEl.css('color', 'red');
        this._headerEl.text('Current model may have changed.');
    };

    FSMSimulatorWidget.prototype.updateNode = function (desc) {
        this._headerEl.css('color', 'red');
        this._headerEl.text('Current model may have changed.');
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    FSMSimulatorWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    FSMSimulatorWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    FSMSimulatorWidget.prototype.destroy = function () {
    };

    FSMSimulatorWidget.prototype.onActivate = function () {
        this._logger.debug('FSMSimulatorWidget has been activated');
    };

    FSMSimulatorWidget.prototype.onDeactivate = function () {
        this._logger.debug('FSMSimulatorWidget has been deactivated');
    };

    return FSMSimulatorWidget;
});
