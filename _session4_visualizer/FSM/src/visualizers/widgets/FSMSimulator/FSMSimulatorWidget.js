/*globals define, WebGMEGlobal, $, d3*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue May 03 2016 14:32:33 GMT-0500 (Central Daylight Time).
 */

define(['jquery', 'd3', 'css!./styles/FSMSimulatorWidget.css'], function () {
    'use strict';

    var FSMSimulatorWidget,
        WIDGET_CLASS = 'f-s-m-simulator';

    FSMSimulatorWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();
        this._simEl = null;
        this._simulator = null;

        this._logger.debug('ctor finished');
    };

    FSMSimulatorWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create indication header
        this._headerEl = $('<h3>');
        this._el.append(this._headerEl);

        // Larger html snippets should ideally be defined in html-files and include using require-text (text!<path>).
        this._inputGroup = $(
            '<div class="input-group">' +
            '<span class="input-group-btn">' +
                '<button class="btn btn-primary go-btn" type="button">Go!</button>' +
            '</span>' +
            '<input type="text" class="form-control" placeholder="Enter an event...">' +
                '<span class="input-group-btn">' +
                    '<button class="btn btn-warning start-btn" type="button">Initialize</button>' +
                '</span>' +
        '</div>');

        this._el.append(this._inputGroup);

        // Using jquery selector https://api.jquery.com/category/selectors/
        this._inputField = this._inputGroup.find('input');
        this._goBtn = this._inputGroup.find('.go-btn');
        this._startBtn = this._inputGroup.find('.start-btn');

        this._startBtn.on('click', function () {
            var stateId,
                stateNode,
                key,
                helpMessage;
            if (self._simulator === null) {
                self._logger.error('Simulator not available at init');
                return;
            }

            // Clean up all state decoration.
            for (key in self._idToState) {
                stateNode = self._idToState[key];
                stateNode.circle.attr('fill', stateNode.defaultColor);
            }

            self._simulator.initialize();

            stateId = self._simulator.getCurrentState().id;
            self._setState(stateId);

            helpMessage = 'Enter an event: ' + self._simulator.getPossibleEvents();
            self._inputField.attr('placeholder', helpMessage);
            self._inputField.attr('title', helpMessage);

            self._goBtn.prop('disabled', false);

        });

        this._goBtn.on('click', function () {
            var prevStateId,
                stateId,
                event,
                helpMessage;
            if (self._simulator === null) {
                self._logger.error('Simulator not available at go');
                return;
            }

            // Store the previous state.
            prevStateId = self._simulator.getCurrentState().id;

            // Input the event..
            event = self._inputField.val();
            self._simulator.enterEvent(event);

            // get the newly calculated event.
            stateId = self._simulator.getCurrentState().id;
            self._setState(stateId, prevStateId);
            if (self._simulator.atEnd === true) {
                helpMessage = 'At an end state, reinitialize the simulator.';
                self._goBtn.prop('disabled', true);
            } else {
                helpMessage = 'Enter an event: ' + self._simulator.getPossibleEvents();
            }

            self._inputField.attr('placeholder', helpMessage);
            self._inputField.attr('title', helpMessage);
            self._inputField.val('');
        });

        this._inputGroup.hide();

        // Create the d3
        this._svgD3 = d3.select(this._el[0]).append('svg')
            .attr('width', width)
            .attr('height', height);
    };

    FSMSimulatorWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');

        this._svgD3
            .attr('width', width)
            .attr('height', height);
    };

    FSMSimulatorWidget.prototype.populateGraph = function (fsmData) {
        var key,
            srcNode,
            dstNode,
            jointId,
            node;

        this._logger.debug('fsmData', fsmData);
        this._idToState = {};
        this._jointIdToTransitions = {};

        //TODO: refactor this and do it in better order (connections first).
        for (key in fsmData.nodes) {
            node = fsmData.nodes[key];
            if (node.metaType === 'State' || node.metaType === 'Initial' || node.metaType === 'End') {
                this._idToState[key] = {
                    data: node,
                    circle: null,
                    title: null,
                    defaultColor: null
                };

                this._idToState[key].circle = this._svgD3.append("circle")
                    .attr("cx", node.position.x)
                    .attr("cy", node.position.y)
                    .attr("r", 20)
                    .attr('fill', 'gray');
                this._idToState[key].defaultColor = 'gray';

                if (node.metaType === 'Initial') {
                    this._idToState[key].circle.attr('fill', 'green');
                    this._idToState[key].defaultColor = 'green';
                } else if (node.metaType === 'End') {
                    this._idToState[key].circle.attr('fill', 'purple');
                    this._idToState[key].defaultColor = 'purple';
                }

                this._idToState[key].title = this._svgD3.append("text")
                    .attr("x", node.position.x)
                    .attr("y", node.position.y)
                    .text(function (d) {
                        return node.name;
                    })
                    .attr('fill', 'black');
            } else if (node.isConnection) {
                srcNode = fsmData.nodes[node.connects.src];
                dstNode = fsmData.nodes[node.connects.dst];

                //TODO: Use joint id
                this._jointIdToTransitions[key] = {};

                this._jointIdToTransitions[key].line = this._svgD3.append("line")
                    .attr("x1", srcNode.position.x)
                    .attr("y1", srcNode.position.y)
                    .attr("x2", dstNode.position.x)
                    .attr("y2", dstNode.position.y)
                    .attr('stroke-width', 1)
                    .attr('stroke', 'black');
            }
        }

        this._embedSimulator(fsmData);
    };

    FSMSimulatorWidget.prototype._embedSimulator = function (fsmData) {
        var self = this;
        if (this._simEl === null) {
            this._simEl = $( '<iframe id="FSMSimulator" src="' + fsmData.simulatorUrl +
                '" width="0" height="0"></iframe>' );
            this._el.append(this._simEl);
            this._simEl.on('load', function () {
                var FSM = self._simEl[0].contentWindow.FSM;
                self._simulator = new FSM.Simulator(self._logger.debug);
                self._logger.debug('Simulator is loaded', self._simulator);
                self._inputGroup.show();
                self._goBtn.prop('disabled', true);
                self._inputField.prop('placeholder', 'Initialize simulator..');
            });
        }
    };

    FSMSimulatorWidget.prototype._setState = function (state, prevState) {
        var newStateNode = this._idToState[state].circle,
            prevStateNode,
            delay = 0;

        if (prevState && prevState !== state) {
            prevStateNode = this._idToState[prevState].circle;
            prevStateNode.transition()
                .duration(300)
                .attr('r', 10)
                .delay(400)
                .transition()
                .duration(300)
                .attr('r', 20)
                .attr('fill', this._idToState[prevState].defaultColor);
            delay = 400;
        }

        newStateNode.transition()
            .delay(delay)
            .duration(300)
            .attr('r', 40)
            .delay(400)
            .transition()
            .duration(300)
            .attr('r', 20)
            .attr('fill', 'red');
    };

    // Adding/Removing/Updating items
    FSMSimulatorWidget.prototype.addNode = function (desc) {
        this._headerEl.css('color', 'red');
        this._headerEl.text('Current model may have changed.');
    };

    FSMSimulatorWidget.prototype.removeNode = function (gmeId) {
        this._headerEl.css('color', 'red');
        this._headerEl.text('Current model may have changed.');
    };

    FSMSimulatorWidget.prototype.updateNode = function (desc) {
        this._headerEl.css('color', 'red');
        this._headerEl.text('Current model may have changed.');
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    FSMSimulatorWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    FSMSimulatorWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    FSMSimulatorWidget.prototype.destroy = function () {
        this._goBtn.off('click');
        this._startBtn.off('click');
    };

    FSMSimulatorWidget.prototype.onActivate = function () {
        this._logger.debug('FSMSimulatorWidget has been activated');
    };

    FSMSimulatorWidget.prototype.onDeactivate = function () {
        this._logger.debug('FSMSimulatorWidget has been deactivated');
    };

    return FSMSimulatorWidget;
});
