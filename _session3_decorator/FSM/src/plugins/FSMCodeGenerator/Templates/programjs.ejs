<%
var i, j,
        outerIf = '        if',
        innerIf = '            if',
        initialStateName;

for (i = 0; i < stateMachine.states.length; i += 1) {
    if (stateMachine.states[i].id === stateMachine.initialState) {
        initialStateName = stateMachine.states[i].name;
        break;
    }
}

%>
var FSM = {};

/**
 *
 * @param {function(function)} inputFn - Should invoke the callback with event data, e.g. "readline".
 * @param {function(string)} log - Out put goes here, e.g. console.log.
 * @param {function} exit - called when machine terminates, e.g. process.exit.
 */
FSM.machine = function finiteStateMachine(inputFn, log, exit) {
    'use strict';
    var finalStates = [],
        currentState = '<%=initialStateName%>',
        currentStateId = '<%=stateMachine.initialState%>';

<%for (i = 0; i < stateMachine.finalStates.length; i += 1) {%>    finalStates.push('<%=stateMachine.finalStates[i]%>');
<%}%>

    log('Current state: ' + currentState + '(' + currentStateId + ')');
    log('Enter an event: ');

    inputFn(function (currentInput) {
<%for (i = 0; i < stateMachine.states.length; i += 1) {
    var eventStr = '';
    if (stateMachine.states[i].transitions.length === 0) {
        continue;
    }
    innerIf = '            if';%><%=outerIf%> (currentStateId === "<%=stateMachine.states[i].id%>") {
<%for (j = 0; j < stateMachine.states[i].transitions.length; j += 1) {
    var transition = stateMachine.states[i].transitions[j];
    eventStr += ', ' + transition.event;
%><%=innerIf%> (currentInput === '<%=transition.event%>') {
                log('Switching state to State1 (1)');
                currentStateId = '<%=transition.targetId%>';
                currentState = '<%=transition.targetName%>';
            }<%if (j === stateMachine.states[i].transitions.length - 1) {%> else {
                log('Possible events for transition(s): <%=eventStr.substring(2)%>');
            }<%}innerIf = ' else if';}%>
        }<%outerIf = ' else if';}%>

        if (currentInput === 'exit') {
            exit();
        } else if (finalStates.indexOf(currentStateId) !== -1) {
            log('At a final state ' + currentState + '(' + currentStateId + ')');
            exit();
        } else {
            log('Current state: ' + currentState + '(' + currentStateId + ')');
            log('Enter an event: ');
        }
    });
}

FSM.Helpers = function () {
    'use strict';
    var self = this,
        currentInput = '',
        breakLoop = false;

    this.log = function (str) {
        currentInput += str + '\n';
    };

    this.inputFn = function (callback) {
        var newInput = window.prompt(currentInput);
        callback(newInput);
        if (breakLoop === false) {
            self.inputFn(callback);
        }
    };

    this.exit = function () {
        breakLoop = true;
    }
};
